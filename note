1.try-catch
异步操作，try-catch是无法捕获异常的；
对于异步操作，要通过判断错误号（err.code）来进行出错处理

2.在项目目录下使用npm install:表示本地安装，模块会被安装到项目目录下的name_modules文件夹下；
3.全局安装,例如： npm install -g express 
4.npm init -y 直接生成package.json 里面都是默认值； 
5.模块可以用nodejs的require获取；包必须包含package.json文件
package.json :包（项目）描述文件
6.元数据：描述自己的数据
7.package-lock.json:是npm5以上才有的；在你第一次安装第三方包时才会生成此文件；

8.response.end() & response.send()
参数类型区别：前者参数类型更丰富，后者的参数类型只能是string,buffer
response.send()会自动生成更多的响应报文头，所以没有乱码；

9.app.get() & app.use() & app.all()
app.get("/index",callback) :请求method为get,pathname===/index
app.use("/index",callback):不限定请求method，路径只要包含use配置的路由即可访问 (/index,/index/aa/bb 都可访问)
app.all("/index",callback):不限定请求method,路径需要完全匹配（===）

10. response.setHeader() & response.writeHeader()
一个请求过来，系统一定会调用response.writeHeader()方法；系统通过writeheader写数据

request常用方法：
request.headers
request.rawHeaders
request.httpVersion
request.methode
request.url

response常用API
response.end():该方法会通知服务器，所有响应头，响应主题都已被发送，即服务器将其视为已完成；每次响应必须调用该方法；
response.end():如果要响应数据的话，只能是string、buffer类型；
response.setHeader():设置响应报文头
response.statusCode 设置Http响应状态码
response.statusMessage 设置Http响应状态码对应的消息


nodejs借助express实现跨域请求，借助其创建一个web项目（要求安装了全局的express）
1) 创建一个项目，express test

2）切换到test目录下 npm install express http-proxy --save

3)编写server.js，实现请求转发：
var express = require('express');

var proxyMiddleWare = require("http-proxy-middleware");
var proxyPath = "http://localhost:8080";//目标后端服务地址

var proxyOption ={
    target:proxyPath,//需要代理的域名
    changeOrigoin:false
}

var app = express();//创建一个app对象，类似于创建一个server对象
    app.use(express.static("./public"))//这段程序的作用是将我们的前端项目设置成静态资源这样我们在浏览器中就可以直接通过http://127.0.0.1:xxxx/xxx(所在页面的目录层级)访问我们的页面,做到边开发边调试.

    app.use("/blog",proxyMiddleWare(proxyOption))//这里要注意"/login" 是匹配的路由,它会将匹配的路由进行转发，没匹配到的就不会转发。
    //启动服务
    var server = app.listen(8080,function(){
        var host = server.address().address;
        var port = server.address().port;
 
         console.log("访问地址为 http://%s:%s", host, port)
    });


request.parmas 获取请求参数（地址栏）并以json数据的形式返回
http://localhost:8080/test/11/25

request.use("/test/:month/:day,function)

request.parmas(url)  ==> {"year":11,"month":25}


buffer：
1）js语言没有读取或操作二进制数据流的机制。
2）Node.js中引入了buffer,便于操作TCP流个文件流。
3）Buffer类型的对象类似于整数数组，但buffer的大小是固定的，且在V8堆外分配物理内存。
4）buffer的大小在被创建时确定，且无法调整。（buffer.length固定，不可修改—）

5）buffer时全局，所以用的时候无需require加载
var buf=buffer.from(string[array]) ==buffer对象
buffer.toString("utf8")


module.exports & exports的区别：
module.exports和exports指向的是同一个对象，最终require返回的是module.exports指向的对象；





